diff --git a/node_modules/react-native-safe-area-view/index.js b/node_modules/react-native-safe-area-view/index.js
index ee91466..f351339 100644
--- a/node_modules/react-native-safe-area-view/index.js
+++ b/node_modules/react-native-safe-area-view/index.js
@@ -1,4 +1,4 @@
-import React, { Component } from 'react';
+import React, {Component} from "react"
 import {
   Dimensions,
   InteractionManager,
@@ -6,56 +6,60 @@ import {
   Platform,
   StyleSheet,
   Animated,
-} from 'react-native';
-import hoistStatics from 'hoist-non-react-statics';
+} from "react-native"
+import hoistStatics from "hoist-non-react-statics"
 
-import withOrientation from './withOrientation';
+import withOrientation from "./withOrientation"
 
 // See https://mydevice.io/devices/ for device dimensions
-const X_WIDTH = 375;
-const X_HEIGHT = 812;
-const XSMAX_WIDTH = 414;
-const XSMAX_HEIGHT = 896;
-const PAD_WIDTH = 768;
-const PAD_HEIGHT = 1024;
+const X_WIDTH = 375
+const X_HEIGHT = 812
+const XSMAX_WIDTH = 414
+const XSMAX_HEIGHT = 896
+const PAD_WIDTH = 768
+const PAD_HEIGHT = 1024
 
-const { height: D_HEIGHT, width: D_WIDTH } = Dimensions.get('window');
+const {height: D_HEIGHT, width: D_WIDTH} = Dimensions.get(`window`)
 
-const { PlatformConstants = {} } = NativeModules;
-const { minor = 0 } = PlatformConstants.reactNativeVersion || {};
+const {PlatformConstants = {}} = NativeModules
+const {minor = 0} = PlatformConstants.reactNativeVersion || {}
 
 const isIPhoneX = (() => {
-  if (Platform.OS === 'web') return false;
+  if (Platform.OS === `web`) {
+    return false
+  }
 
   return (
-    Platform.OS === 'ios' &&
-    ((D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH) ||
-      (D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT)) ||
-    ((D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH) ||
-        (D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT))
-  );
-})();
+    (Platform.OS === `ios` &&
+      ((D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH) ||
+        (D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT))) ||
+    (D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH) ||
+    (D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT)
+  )
+})()
 
 const isIPad = (() => {
-  if (Platform.OS !== 'ios' || isIPhoneX) return false;
+  if (Platform.OS !== `ios` || isIPhoneX) {
+    return false
+  }
 
   // if portrait and width is smaller than iPad width
   if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
-    return false;
+    return false
   }
 
   // if landscape and height is smaller that iPad height
   if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
-    return false;
+    return false
   }
 
-  return true;
-})();
+  return true
+})()
 
-let _customStatusBarHeight = null;
-const statusBarHeight = isLandscape => {
+let _customStatusBarHeight = null
+const statusBarHeight = (isLandscape) => {
   if (_customStatusBarHeight !== null) {
-    return _customStatusBarHeight;
+    return _customStatusBarHeight
   }
 
   /**
@@ -64,41 +68,43 @@ const statusBarHeight = isLandscape => {
    * factor in the height here; if translucent (content renders under it) then
    * we do.
    */
-  if (Platform.OS === 'android') {
+  if (Platform.OS === `android`) {
     if (global.Expo) {
-      return global.Expo.Constants.statusBarHeight;
+      return global.Expo.Constants.statusBarHeight
     } else {
-      return 0;
+      return 0
     }
   }
 
   if (isIPhoneX) {
-    return isLandscape ? 0 : 44;
+    return isLandscape ? 0 : 44
   }
 
   if (isIPad) {
-    return 20;
+    return 20
   }
 
-  return isLandscape ? 0 : 20;
-};
+  return isLandscape ? 0 : 20
+}
 
-const doubleFromPercentString = percent => {
-  if (!percent.includes('%')) {
-    return 0;
+const doubleFromPercentString = (percent) => {
+  if (!percent.includes(`%`)) {
+    return 0
   }
 
-  const dbl = parseFloat(percent) / 100;
+  const dbl = parseFloat(percent) / 100
 
-  if (isNaN(dbl)) return 0;
+  if (isNaN(dbl)) {
+    return 0
+  }
 
-  return dbl;
-};
+  return dbl
+}
 
 class SafeView extends Component {
-  static setStatusBarHeight = height => {
-    _customStatusBarHeight = height;
-  };
+  static setStatusBarHeight = (height) => {
+    _customStatusBarHeight = height
+  }
 
   state = {
     touchesTop: true,
@@ -108,76 +114,80 @@ class SafeView extends Component {
     orientation: null,
     viewWidth: 0,
     viewHeight: 0,
-  };
+  }
 
   componentDidMount() {
-    this._isMounted = true;
+    this._isMounted = true
     InteractionManager.runAfterInteractions(() => {
-      this._onLayout();
-    });
+      this._onLayout()
+    })
   }
 
   componentWillUnmount() {
-    this._isMounted = false;
+    this._isMounted = false
   }
 
   componentWillReceiveProps() {
-    this._onLayout();
+    this._onLayout()
   }
 
   render() {
-    const { forceInset = false, isLandscape, style, ...props } = this.props;
+    const {forceInset = false, isLandscape, style, ...props} = this.props
 
-    const safeAreaStyle = this._getSafeAreaStyle();
+    const safeAreaStyle = this._getSafeAreaStyle()
 
     return (
       <Animated.View
-        ref={c => (this.view = c)}
-        pointerEvents='box-none'
+        ref={(c) => (this.view = c)}
+        pointerEvents="box-none"
         {...props}
         onLayout={this._onLayout}
         style={safeAreaStyle}
       />
-    );
+    )
   }
 
   _onLayout = (...args) => {
-    if (!this._isMounted) return;
-    if (!this.view) return;
+    if (!this._isMounted) {
+      return
+    }
+    if (!this.view) {
+      return
+    }
 
-    const { isLandscape } = this.props;
-    const { orientation } = this.state;
-    const newOrientation = isLandscape ? 'landscape' : 'portrait';
+    const {isLandscape} = this.props
+    const {orientation} = this.state
+    const newOrientation = isLandscape ? `landscape` : `portrait`
     if (orientation && orientation === newOrientation) {
-      return;
+      return
     }
 
-    const WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
-    const HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;
+    const WIDTH = isLandscape ? X_HEIGHT : X_WIDTH
+    const HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT
 
-    this.view._component.measureInWindow((winX, winY, winWidth, winHeight) => {
+    this.view.getNode().measureInWindow((winX, winY, winWidth, winHeight) => {
       if (!this.view) {
-        return;
+        return
       }
-      let realY = winY;
-      let realX = winX;
+      let realY = winY
+      let realX = winX
 
       if (realY >= HEIGHT) {
-        realY = realY % HEIGHT;
+        realY = realY % HEIGHT
       } else if (realY < 0) {
-        realY = realY % HEIGHT + HEIGHT;
+        realY = (realY % HEIGHT) + HEIGHT
       }
 
       if (realX >= WIDTH) {
-        realX = realX % WIDTH;
+        realX = realX % WIDTH
       } else if (realX < 0) {
-        realX = realX % WIDTH + WIDTH;
+        realX = (realX % WIDTH) + WIDTH
       }
 
-      const touchesTop = realY === 0;
-      const touchesBottom = realY + winHeight >= HEIGHT;
-      const touchesLeft = realX === 0;
-      const touchesRight = realX + winWidth >= WIDTH;
+      const touchesTop = realY === 0
+      const touchesBottom = realY + winHeight >= HEIGHT
+      const touchesLeft = realX === 0
+      const touchesRight = realX + winWidth >= WIDTH
 
       this.setState({
         touchesTop,
@@ -187,15 +197,17 @@ class SafeView extends Component {
         orientation: newOrientation,
         viewWidth: winWidth,
         viewHeight: winHeight,
-      });
+      })
 
-      if (this.props.onLayout) this.props.onLayout(...args);
-    });
-  };
+      if (this.props.onLayout) {
+        this.props.onLayout(...args)
+      }
+    })
+  }
 
   _getSafeAreaStyle = () => {
-    const { touchesTop, touchesBottom, touchesLeft, touchesRight } = this.state;
-    const { forceInset, isLandscape } = this.props;
+    const {touchesTop, touchesBottom, touchesLeft, touchesRight} = this.state
+    const {forceInset, isLandscape} = this.props
 
     const {
       paddingTop,
@@ -203,71 +215,71 @@ class SafeView extends Component {
       paddingLeft,
       paddingRight,
       viewStyle,
-    } = this._getViewStyles();
+    } = this._getViewStyles()
 
     const style = {
       ...viewStyle,
-      paddingTop: touchesTop ? this._getInset('top') : 0,
-      paddingBottom: touchesBottom ? this._getInset('bottom') : 0,
-      paddingLeft: touchesLeft ? this._getInset('left') : 0,
-      paddingRight: touchesRight ? this._getInset('right') : 0,
-    };
+      paddingTop: touchesTop ? this._getInset(`top`) : 0,
+      paddingBottom: touchesBottom ? this._getInset(`bottom`) : 0,
+      paddingLeft: touchesLeft ? this._getInset(`left`) : 0,
+      paddingRight: touchesRight ? this._getInset(`right`) : 0,
+    }
 
     if (forceInset) {
-      Object.keys(forceInset).forEach(key => {
-        let inset = forceInset[key];
+      Object.keys(forceInset).forEach((key) => {
+        let inset = forceInset[key]
 
-        if (inset === 'always') {
-          inset = this._getInset(key);
+        if (inset === `always`) {
+          inset = this._getInset(key)
         }
 
-        if (inset === 'never') {
-          inset = 0;
+        if (inset === `never`) {
+          inset = 0
         }
 
         switch (key) {
-          case 'horizontal': {
-            style.paddingLeft = inset;
-            style.paddingRight = inset;
-            break;
+          case `horizontal`: {
+            style.paddingLeft = inset
+            style.paddingRight = inset
+            break
           }
-          case 'vertical': {
-            style.paddingTop = inset;
-            style.paddingBottom = inset;
-            break;
+          case `vertical`: {
+            style.paddingTop = inset
+            style.paddingBottom = inset
+            break
           }
-          case 'left':
-          case 'right':
-          case 'top':
-          case 'bottom': {
-            const padding = `padding${key[0].toUpperCase()}${key.slice(1)}`;
-            style[padding] = inset;
-            break;
+          case `left`:
+          case `right`:
+          case `top`:
+          case `bottom`: {
+            const padding = `padding${key[0].toUpperCase()}${key.slice(1)}`
+            style[padding] = inset
+            break
           }
         }
-      });
+      })
     }
 
     // new height/width should only include padding from insets
     // height/width should not be affected by padding from style obj
-    if (style.height && typeof style.height === 'number') {
-      style.height += style.paddingTop + style.paddingBottom;
+    if (style.height && typeof style.height === `number`) {
+      style.height += style.paddingTop + style.paddingBottom
     }
 
-    if (style.width && typeof style.width === 'number') {
-      style.width += style.paddingLeft + style.paddingRight;
+    if (style.width && typeof style.width === `number`) {
+      style.width += style.paddingLeft + style.paddingRight
     }
 
-    style.paddingTop = Math.max(style.paddingTop, paddingTop);
-    style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
-    style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
-    style.paddingRight = Math.max(style.paddingRight, paddingRight);
+    style.paddingTop = Math.max(style.paddingTop, paddingTop)
+    style.paddingBottom = Math.max(style.paddingBottom, paddingBottom)
+    style.paddingLeft = Math.max(style.paddingLeft, paddingLeft)
+    style.paddingRight = Math.max(style.paddingRight, paddingRight)
 
-    return style;
-  };
+    return style
+  }
 
   _getViewStyles = () => {
-    const { viewWidth } = this.state;
+    const {viewWidth} = this.state
     // get padding values from style to add back in after insets are determined
     // default precedence: padding[Side] -> vertical | horizontal -> padding -> 0
     let {
@@ -279,22 +291,22 @@ class SafeView extends Component {
       paddingLeft = paddingHorizontal,
       paddingRight = paddingHorizontal,
       ...viewStyle
-    } = StyleSheet.flatten(this.props.style || {});
+    } = StyleSheet.flatten(this.props.style || {})
 
-    if (typeof paddingTop !== 'number') {
-      paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
+    if (typeof paddingTop !== `number`) {
+      paddingTop = doubleFromPercentString(paddingTop) * viewWidth
     }
 
-    if (typeof paddingBottom !== 'number') {
-      paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
+    if (typeof paddingBottom !== `number`) {
+      paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth
     }
 
-    if (typeof paddingLeft !== 'number') {
-      paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
+    if (typeof paddingLeft !== `number`) {
+      paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth
     }
 
-    if (typeof paddingRight !== 'number') {
-      paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
+    if (typeof paddingRight !== `number`) {
+      paddingRight = doubleFromPercentString(paddingRight) * viewWidth
     }
 
     return {
@@ -303,46 +315,46 @@ class SafeView extends Component {
       paddingLeft,
       paddingRight,
       viewStyle,
-    };
-  };
+    }
+  }
 
-  _getInset = key => {
-    const { isLandscape } = this.props;
+  _getInset = (key) => {
+    const {isLandscape} = this.props
     switch (key) {
-      case 'horizontal':
-      case 'right':
-      case 'left': {
-        return isLandscape ? (isIPhoneX ? 44 : 0) : 0;
+      case `horizontal`:
+      case `right`:
+      case `left`: {
+        return isLandscape ? (isIPhoneX ? 44 : 0) : 0
       }
-      case 'vertical':
-      case 'top': {
-        return statusBarHeight(isLandscape);
+      case `vertical`:
+      case `top`: {
+        return statusBarHeight(isLandscape)
       }
-      case 'bottom': {
-        return isIPhoneX ? (isLandscape ? 24 : 34) : 0;
+      case `bottom`: {
+        return isIPhoneX ? (isLandscape ? 24 : 34) : 0
       }
     }
-  };
+  }
 }
 
-const SafeAreaView = withOrientation(SafeView);
+const SafeAreaView = withOrientation(SafeView)
 
-export default SafeAreaView;
+export default SafeAreaView
 
 const withSafeArea = function (forceInset = {}) {
   return (WrappedComponent) => {
     class withSafeArea extends Component {
       render() {
         return (
-          <SafeAreaView style={{ flex: 1 }} forceInset={forceInset}>
+          <SafeAreaView style={{flex: 1}} forceInset={forceInset}>
             <WrappedComponent {...this.props} />
           </SafeAreaView>
-        );
+        )
       }
     }
 
-    return hoistStatics(withSafeArea, WrappedComponent);
-  };
+    return hoistStatics(withSafeArea, WrappedComponent)
+  }
 }
 
-export { withSafeArea };
+export {withSafeArea}
